<!DOCTYPE html>
<html lang="en">
    <head>
        <title>{{appTitle}}</title>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <!--<meta http-equiv="Content-Security-Policy" content="default-src 'self'; script-src 'self' 'unsafe-inline' http://{{server}}; style-src 'self' https://fonts.googleapis.com;">-->
        <link rel="stylesheet" type="text/css" href="/css/style.css">
        {{#link}}
            {{#isText}}
                <link rel="stylesheet" href="http://{{server}}/css/highlight/googlecode.min.css">
                <script src="http://{{server}}/js/highlight.min.js"></script>
            {{/isText}}
        {{/link}}
        <script src="http://{{server}}/js/qrcode.js"></script>
        <script>
            function copyContent(id) {
                const input = document.getElementById(id);
                input.style.display = "block";
                input.select();
                input.setSelectionRange(0,999999999);
                document.execCommand("copy");
                input.style.display = "none";
                window.alert("Text copied.");
            }
            function drawCanvas() {
                const canvas = document.getElementById("qr-code");
                QRCode.toCanvas(canvas, 'http://{{server}}/{{link.uid}}', (error) => {
                    if(error) console.error(error);
                });
            }
            function setupDownloadLink() {
                var link = document.getElementById("download");
                const text = document.getElementById("hidden-content").value;
                var file = new Blob([text], {"type": "text/plain"});
                link.href = URL.createObjectURL(file);
                link.download = `{{link.uid}}.txt`;
            }
            function highlightCode() {
                if ("{{link.textType}}" == "plain") return;
                const input = document.getElementById("content-text");
                const currentHTML = input.textContent;
                const newHTML = hljs.highlight(currentHTML, { language: "{{link.textType}}" }).value;
                const replacedNewlines = newHTML.replace(/\n/g, '</div><div>');
                input.innerHTML = "<div>" + replacedNewlines + "</div>";
            }
            function init() {
                {{#link}}
                    drawCanvas();
                    {{#isText}}
                        setupDownloadLink();
                        highlightCode();
                    {{/isText}}
                {{/link}}
            }
            function showSpinner() {
                spinnerFrames=['▁','▃','▄','▅','▆','▇','█','▇','▆','▅','▄','▃'];
                currFrame=0;
                const spinner = document.getElementById("spinner");
                spinner.style.display = "block";
                function nextFrame(){
                    spinner.innerHTML = "Uploading " + spinnerFrames[currFrame];
                    currFrame=(currFrame==spinnerFrames.length-1)? 0:currFrame+1;
                }
                setInterval(nextFrame, 100);
            }
            function checkFileSize(inputElement) {
                if(inputElement.files[0].size > {{maxUploadSize}}) {
                    alert("Files must be less than {{maxUploadSize}} bytes.");
                    inputElement.value = "";
                }
            }
        </script>
    </head>
    <body {{#link}}class="link"{{/link}}>
        <header>
            <a id="title" href="http://{{server}}">
                <img src="/images/logo.png"/>
                <h1>Raviolink</h1>
            </a>
            <p id="subtitle">Share shortened URLs, text and code.</p>
        </header>